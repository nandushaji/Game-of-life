{"version":3,"sources":["components/ShowGrid.js","components/RowCol.js","App.js","serviceWorker.js","index.js"],"names":["ShowGrid","props","lineStyle","background","border","color","padding","textAlign","textDecoration","display","fontSize","lineStyle2","array","cloneDeep","grid","useEffect","style","margin","map","row","i","e","j","onClick","k","m","col","setGrid","RowCol","min","type","onChange","setRow","target","value","setCol","App","useState","start","SetStarted","initGrid","interval","setInterval","startLife","clearInterval","length","currentGen","copyGen","countNeighbours","cGen","total","xoff","yoff","r","c","n","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a5c7bb5e.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport cloneDeep from \"lodash/cloneDeep\";\n\nconst ShowGrid = (props) => {\n  const lineStyle = {\n    background: \"#4CAF50\",\n    border: \"none\",\n    color: \"white\",\n    padding: \"32px 32px\",\n    textAlign: \"center\",\n    textDecoration: \"none\",\n    display: \"inline-block\",\n    fontSize: \"16px\",\n  };\n  const lineStyle2 = {\n    background: \"#f44336\",\n    border: \"none\",\n    color: \"white\",\n    padding: \"32px 32px\",\n    textAlign: \"center\",\n    textDecoration: \"none\",\n    display: \"inline-block\",\n    fontSize: \"16px\",\n  };\n  const array = cloneDeep(props.grid);\n  useEffect(() => {}, props.grid);\n\n  return (\n    <div>\n      <table style={{ margin: \"10px\" }}>\n        <tbody>\n          {array.map((row, i) => (\n            <tr>\n              {row.map((e, j) => (\n                <td>\n                  <button\n                    onClick={() => {\n                      for (let k = 0; k < props.row; k++) {\n                        for (let m = 0; m < props.col; m++) {\n                          if (k === i && m === j) {\n                            array[k][m] = 1;\n                          }\n                        }\n                      }\n\n                      props.setGrid(array);\n                    }}\n                    style={props.grid[i][j] ? lineStyle : lineStyle2}\n                  ></button>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nexport default ShowGrid;\n","import React from \"react\";\n\nconst RowCol = (props) => {\n  return (\n    <div>\n      <label>Rows:</label>\n      <input\n        min=\"1\"\n        type=\"number\"\n        onChange={(e) => {\n          props.setRow(e.target.value);\n        }}\n      ></input>\n      <label>Column:</label>\n      <input\n        min=\"1\"\n        type=\"number\"\n        onChange={(e) => {\n          props.setCol(e.target.value);\n        }}\n      ></input>\n    </div>\n  );\n};\n\nexport default RowCol;\n","import React, { useState, useEffect } from \"react\";\nimport ShowGrid from \"./components/ShowGrid\";\nimport RowCol from \"./components/RowCol\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [row, setRow] = useState();\n  const [start, SetStarted] = useState(false);\n  const [col, setCol] = useState();\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    let initGrid = [];\n    for (let i = 0; i < row; i++) {\n      initGrid[i] = [];\n      for (let j = 0; j < col; j++) {\n        initGrid[i][j] = 0;\n      }\n    }\n    setGrid(initGrid);\n  }, [row, col]);\n\n  useEffect(() => {\n    let interval;\n    if (start) {\n      interval = setInterval(() => {\n        if (!start) {\n          return;\n        }\n        setGrid(startLife);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [start, grid, setGrid]);\n  const startLife = (grid) => {\n    let row = grid.length;\n    let col = grid[0].length;\n    const currentGen = cloneDeep(grid);\n    const copyGen = cloneDeep(grid);\n    const countNeighbours = (i, j, cGen) => {\n      var total = 0;\n      for (var xoff = -1; xoff <= 1; xoff++) {\n        for (var yoff = -1; yoff <= 1; yoff++) {\n          var r = i + xoff;\n          var c = j + yoff;\n          if (xoff !== 0 || yoff !== 0) {\n            if (r > -1 && r < row && c > -1 && c < col) {\n              if (cGen[r][c] === 1) {\n                total++;\n              }\n            }\n          }\n        }\n      }\n      return total;\n    };\n    for (let i = 0; i < row; i++) {\n      for (let j = 0; j < col; j++) {\n        var n = countNeighbours(i, j, currentGen);\n\n        if (currentGen[i][j] === 1) {\n          if (n < 2) {\n            copyGen[i][j] = 0;\n          } else if (n > 3) {\n            copyGen[i][j] = 0;\n          }\n        } else {\n          if (n === 3) {\n            copyGen[i][j] = 1;\n          }\n        }\n      }\n    }\n\n    setGrid(copyGen);\n  };\n  return (\n    <div className=\"App-header\">\n      <h1>Game of life</h1>\n      <RowCol setCol={setCol} setRow={setRow} setGrid={setGrid} />\n      <ShowGrid grid={grid} row={row} col={col} setGrid={setGrid} />\n      <div style={{ textAlign: \"center\" }}>\n        <button\n          className=\"button\"\n          onClick={() => {\n            SetStarted(!start);\n          }}\n        >\n          {start ? \"stop\" : \"start\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}